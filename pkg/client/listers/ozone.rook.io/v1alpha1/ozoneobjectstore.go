/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/rook/rook/pkg/apis/ozone.rook.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OzoneObjectStoreLister helps list OzoneObjectStores.
type OzoneObjectStoreLister interface {
	// List lists all OzoneObjectStores in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.OzoneObjectStore, err error)
	// OzoneObjectStores returns an object that can list and get OzoneObjectStores.
	OzoneObjectStores(namespace string) OzoneObjectStoreNamespaceLister
	OzoneObjectStoreListerExpansion
}

// ozoneObjectStoreLister implements the OzoneObjectStoreLister interface.
type ozoneObjectStoreLister struct {
	indexer cache.Indexer
}

// NewOzoneObjectStoreLister returns a new OzoneObjectStoreLister.
func NewOzoneObjectStoreLister(indexer cache.Indexer) OzoneObjectStoreLister {
	return &ozoneObjectStoreLister{indexer: indexer}
}

// List lists all OzoneObjectStores in the indexer.
func (s *ozoneObjectStoreLister) List(selector labels.Selector) (ret []*v1alpha1.OzoneObjectStore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OzoneObjectStore))
	})
	return ret, err
}

// OzoneObjectStores returns an object that can list and get OzoneObjectStores.
func (s *ozoneObjectStoreLister) OzoneObjectStores(namespace string) OzoneObjectStoreNamespaceLister {
	return ozoneObjectStoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OzoneObjectStoreNamespaceLister helps list and get OzoneObjectStores.
type OzoneObjectStoreNamespaceLister interface {
	// List lists all OzoneObjectStores in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.OzoneObjectStore, err error)
	// Get retrieves the OzoneObjectStore from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.OzoneObjectStore, error)
	OzoneObjectStoreNamespaceListerExpansion
}

// ozoneObjectStoreNamespaceLister implements the OzoneObjectStoreNamespaceLister
// interface.
type ozoneObjectStoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OzoneObjectStores in the indexer for a given namespace.
func (s ozoneObjectStoreNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OzoneObjectStore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OzoneObjectStore))
	})
	return ret, err
}

// Get retrieves the OzoneObjectStore from the indexer for a given namespace and name.
func (s ozoneObjectStoreNamespaceLister) Get(name string) (*v1alpha1.OzoneObjectStore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ozoneobjectstore"), name)
	}
	return obj.(*v1alpha1.OzoneObjectStore), nil
}
